---
title: "STAT 331 Portfolio"
author: Jia Jiang
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_A\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`Lab 3 Question 1

```{r wd-1-csv}
surveys <- read_csv(here("hiphop.csv"))
```

-   `xlsx`Practice 4 Question 1

```{r wd-1-xlsx}
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"))
```

-   `txt`Practice 5.2 Question 1

```{r wd-1-txt}
message <- read_csv(here::here("data","scrambled_message.txt")
                      )
```

**WD-2: I can select necessary columns from a dataset.**

-   Lab3 Question 2

```{r wd-2}
hiphop_new <- hiphop_clean |> 
  select(sex, age, ethnic, subj) |> 
  distinct(subj, .keep_all = TRUE)  
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric lab 4 Question 4

```{r wd-3-numeric}
new_avocado_major |> 
  filter(Year==2017, type== "organic") 

```

-   character -- specifically a string practice 5.2 question 2

```{r wd-3-string}
message %>% 
  filter(str_detect(Word, pattern = "\\w")) %>% 
  count() 

```

-   factor lab 4 Question 4

```{r wd-3-factor}
new_avocado_major |> 
  filter(Year==2017, type== "organic") 
```

-   date practice 5.1 question 2

```{r wd-3-date}
suspects <- suspects |>
  filter(wday(Time.Spotted) != c(2, 4))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric lab 5 question 1

```{r wd-4-numeric}
surveys <- surveys|> 
  drop_na() |>
  mutate(species = factor(species), 
         weight = as.numeric(weight),
         species=fct_reorder(species, weight, .desc = TRUE))
```

-   character -- specifically a string practice 5.2 question 1 and 2

```{r wd-4-string}
message %>% 
  mutate(length = str_length(Word)) %>% 
  summarise(total_length = sum(length))

message <- message |>
  mutate(Word=str_trunc(Word, width=16))
```

-   factor lab 5 question 1 and 7

```{r wd-4-factor}
surveys <- surveys|> 
  drop_na() |>
  mutate(species = factor(species), 
         weight = as.numeric(weight),
         species=fct_reorder(species, weight, .desc = TRUE))

nsurveys <- surveys |>
  mutate(day_of_week = factor(day_of_week),
         day_of_week = fct_reorder(day_of_week, 
                                    c("Mon", 
                                      "Tue", 
                                      "Wed", 
                                      "Thu",
                                      "Fri", 
                                      "Sat", 
                                      "Sun") )) |>
  drop_na(day_of_week)

ggplot(nsurveys, aes(x=day_of_week)) +
  geom_bar() +
  labs(y="", title="Count of rodent caught")
```

-   date 5.1 question 2

```{r wd-4-date}
suspects <- suspects |> 
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted, 
                                 tzone = "America/Los_Angeles")) |>
  filter(pm(Time.Spotted))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join() preview 4`

```{r wd-5-left}
left_join( prof_info,prof_course)
```

-   `right_join() preview 4`

```{r wd-5-right}
right_join( prof_course, prof_info)
```

-   `inner_join() preview 4`

```{r wd-5-inner}
new <- inner_join(prof_info, prof_course)
```

-   `full_join() challenge 4`

```{r wd-5-full}
clean_avo <- avo |>
  separate(col = Date, sep = "-", 
           into = c("Year", "Month", "Day")) |>
  filter(region %in% c("LosAngeles", 
                       "SanDiego", 
                       "Sacramento",
                       "SanFrancisco") & Year != 2015) |>  
  group_by(region, 
           Year) |> 
  summarise(mean_volume = mean(`Total Volume`),
         mean_price = mean(AveragePrice)) |>
  select(region, 
         Year, 
         mean_price, 
         mean_volume) |>
  distinct() |>
  pivot_wider(names_from = Year, 
              values_from = c(mean_price, mean_volume)) |>
  full_join(housing)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()lab 4`

```{r wd-6-semi}
avocado_metro <- avocado_clean |> 
  semi_join(regions_metro, 
             by="region")
```

-   `anti_join() lab 4 question 1`

```{r wd-6-anti}
avocado_clean <- anti_join(avo, 
                           regions_major, 
                           by = "region")
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer() preview 4`

```{r wd-7-long}
prof_course |>
  pivot_longer(cols=c(Stat_331, 
                      Stat_330, 
                      Stat_431),
               names_to= "course",
               values_to = "can_teach") |>
  full_join(course_info)
```

-   `pivot_wider() challenge 9`

```{r wd-7-wide}
A2_data <- baby_data |>
  filter(Name %in% c("Allan", "Alan", "Allen"), 
         Year == 2000, 
         State %in% c("CA", "PA"),
         Gender == "M") |>
  group_by(State, Name) |>
  summarise(Total = sum(Count)) |>
  pivot_wider(values_from = Total, 
              values_fill = 0,
              names_from = Name) 
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: all in the artifacts

**R-2: I can write well documented and tidy code.**

-   Example 1 lab 5 question 3 revision

```{r r-2-1}
#using data of weight and species to make a jitter and boxplot
ggplot(data=surveys, mapping=aes(x = weight, 
                                  y = species)) + 
  geom_jitter(color="tomato", 
              alpha=.3) +
  geom_boxplot(outlier.alpha = 0)+ 
  labs(y="",
       x="weight of rodentin grams", 
       title = "Box plot for different species weights of rodents in grams across speices")
```

-   Example 2 lab4 question 4 revision

```{r r-2-2}
#Grabbing the top 5 mean volume of avocados sold per metros
avocado_metro <- avocado_clean |> 
  right_join(regions_metro, 
             by="region")

avocado_metro_avg <- avocado_metro |> 
  group_by(region) |> 
  summarise(avg = mean(`Total Volume`)) |> 
  select(region, 
         avg) |> 
  slice_max(n=5, 
            order_by = avg)
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1 lab3 question 1 revision

```{r r-3-1}
hiphop_new <- hiphop_clean |> 
  select(sex, age, ethnic, subj) |> 
  distinct(subj, .keep_all = TRUE)  
```

-   Example 2 lab 8

```{r r-3-2}
#Grabbing the top 5 mean volume of avocados sold per metros
make_phrase <- function(day, num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item<-ifelse(day>1, 
               pluralize_gift(item), 
               item)
  ## Step 3: If the day is 1, you need to add an "a" or "an" before the gift 
  item<-ifelse(day!=1,
               item, 
               case_when(
                 str_detect(item, "^[aeiou]") ~ str_c("an", item, sep=" " ),
                 TRUE ~ str_c("a", item, sep=" " )
               ))
  ## Step 4: Glue all of the pieces together to make a phrase! 
  return(str_squish(glue("{english(day)} {adjective} {item} {verb} {location}")))

}
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables lab 2 question 4

```{r dvs-1-num}
 ggplot(data=surveys, mapping=aes(x = weight, y = hindfoot_length)) + geom_point() +
   labs(x="weight in grams")
```

-   numeric variables and categorical variables lab 5 question 3

```{r dvs-2-num-cat}
surveys <- surveys|> 
  mutate(species = factor(species), 
         mean_weight = as.numeric(mean_weight),
         species=fct_reorder(species, mean_weight, .desc = TRUE))
ggplot(surveys) +
  geom_line(aes(x=year,
                y=mean_weight,
                col=genus)) +
  labs(y="", 
       title = "Time plot of mean weight of genuses", 
       col="Rodent Genus") 
```

-   categorical variables challenge 2

```{r dvs-2-cat}
surveys <- read_csv(here( "surveys.csv"))
ggplot(data=surveys, mapping=aes(x = weight, 
                                  y = species)) +  
  geom_jitter(color="tomato", 
              alpha=.5, 
              width=.5, 
              height = .5)+
  suppressMessages(geom_density_ridges()) +
  xlab("weight of rodent in grams")+ 
  ylab("species of rodents")
```

-   dates lab 5 time series

```{r dvs-2-date}
surveys <- surveys|> 
  mutate(species = factor(species), 
         mean_weight = as.numeric(mean_weight),
         species=fct_reorder(species, 
                             mean_weight, 
                             .desc = TRUE))
ggplot(surveys) +
  geom_line(aes(x=year,
                y=mean_weight,
                col=genus)) +
  labs(y="", 
       title = "Time plot of mean weight of genuses", 
       col="Rodent Genus") 
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1 Challenge 4

```{r dvs-2-1}
ggplot(clean_avo) +
  geom_point(aes(x=housing_years, y=housing_values), color = "green") + 
  facet_grid(~region) +
  scale_x_discrete(guide = guide_axis(n.dodge=2)) +
  labs(title="Avg prices of housing vs Years in each CA city") + 
  ylab("Housing Prices in Dollars") +
  xlab("Years")

```

-   Example 2 lab 2 quesiton 13

```{r dvs-2-2}
ggplot(data=surveys, 
       mapping=aes(x = weight, 
                   y = species)) + 
  geom_jitter(color="tomato", 
              alpha=.3, 
              height = .5, 
              width = .5) +
  geom_boxplot(outlier.alpha = 0)+ 
  xlab("weight of rodentin in grams")+ 
  ylab("species") + 
  labs(title = "Box plot of weights of rodents in grams across speices")
```

**DVS-3: I show creativity in my visualizations**

-   Example 1 Lab 7

```{r dvs-3-1}
na_data |>
  mutate(trip=factor(trip), 
         year = factor(year)) |>
  ggplot() +
  geom_bar(mapping=aes(x=year,fill=trip)) +
  facet_wrap(~section) +
  scale_x_discrete(guide = guide_axis(n.dodge=2)) +
  labs(title = "Distribution of missing weight data in Years", 
       subtitle = "between <span style='color:#ff8430'>Trip 1</span> and <span style='color:#246252'>Trip 2</span>",
       x="Year", 
       y="Count") +
  scale_fill_manual(values = c("#ff8430", 
                                        "#246252"))+
  theme(plot.subtitle = element_markdown(), 
        legend.position = "none")
```

-   Example 2 Challenge 2

```{r dvs-3-2}
surveys <- read_csv(here( "surveys.csv"))
ggplot(data=surveys, mapping=aes(x = weight, 
                                  y = species)) +  
  geom_jitter(color="tomato", 
              alpha=.5, 
              width=.5, 
              height = .5)+
  suppressMessages(geom_density_ridges()) +
  xlab("weight of rodent in grams")+ 
  ylab("species of rodents")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1 lab 4 question 5

```{r dvs-4-1}
avo_prices <- avocado_cali |> 
  select(region, type, AveragePrice) |> 
  group_by(region, type) |> 
  summarise( avg = mean(AveragePrice)) |> 
  pivot_wider(names_from = region, 
              values_from = avg) |> 
  summarise(diff = across(.cols= `LosAngeles`:`SanFrancisco`, .fns=diff)) 
```

-   Example 2 lab 4 question 4

```{r dvs-4-2}
avocado_metro_avg <- avocado_metro |> 
  group_by(region) |> 
  summarise(avg = mean(`Total Volume`)) |> 
  select(region, avg) |> 
  slice_max(n=5, order_by =avg)
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1 lab 4 question 5

```{r dvs-5-1}
avo_prices <- avocado_cali |> 
  select(region, type, AveragePrice) |> 
  group_by(region, type) |> 
  summarise( avg = mean(AveragePrice)) |> 
  pivot_wider(names_from = region, 
              values_from = avg) |> 
  summarise(diff = across(.cols= `LosAngeles`:`SanFrancisco`, .fns=diff)) 

```

-   Example 2 lab 3 question 11

```{r dvs-5-2}
hiphop_clean |> 
  group_by(word) |> 
  filter(age<20) |> 
  summarise(avg = mean(familiarity)) |> 
  slice_max(avg)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1 challenge 9

```{r dvs-6-1}
table2 |>
  gt() |>
  tab_stubhead("State") |>
  tab_header(title = "Count of `Alan` Names", 
             subtitle = "by State")
```

-   Example 2 challenge 9

```{r dvs-6-2}
table1 |>
  gt() |>
  tab_header(title = "Count of `Allisons`", 
             subtitle = "by State") |>
  tab_spanner(columns = 2:3, 
              label = "Gender") |>
  cols_label(
    F = "Female",
    M = "Male"
  )
```

**DVS-7: I show creativity in my tables.**

-   Example 1 challenge 9

```{r dvs-7-1}
table3 |>
  gt() |>
  cols_label(
    State = md("**State**"),
    Alan = md("**Alan**"),
    Allan = md("**Allan**"),
    Allen = md("**Allen**")) |>
  fmt_percent(columns = 2:4, 
              decimals = 1) |>
  tab_header(title = "Percentages of `Alan` Names", 
             subtitle = "by State") |>
  tab_spanner(columns = 2:4, 
              label = "Names") |>
  tab_source_note( source_note=md("From [Dropbox Link](https://www.dropbox.com/sh/czm61yzmvzl6xfb/AABEFdpy02aNRhZ_vcxrVAQSa?dl=0)")) |>
  data_color(columns = State, 
             colors = c("red", "blue")) |>
  tab_style(locations= cells_body(columns = 2:4), 
            style = list(cell_text(font = "Comic Sansa",
                                   style = "italic")))
```

-   Example 2 challenge 9

```{r dvs-7-2}
table1 |>
  gt() |>
  tab_header(title = "Count of `Allisons`", 
             subtitle = "by State") |>
  tab_spanner(columns = 2:3, 
              label = "Gender") |>
  cols_label(
    F = "Female",
    M = "Male"
  ) |>
  data_color(columns = State, 
             colors = c("green", "yellow")) |>
  tab_style(locations= cells_body(columns = 2:4), 
            style = list(cell_text(font = "Comic Sansa",
                                   style = "italic")))
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call lab7 question 3

```{r pe-1-one-call}
rescale_01 <- function(x){
  stopifnot(is.numeric(x), length(x)>1)
  r <-  range(x, na.rm=TRUE)
  min <- r[1]
  max <- r[2]
  x <- (x-min)/(max-min)
  return(x)
    
}
x <- c(1:85, NA)
x <- rescale_01(x)
```

-   `across()`lab7 question 3.5

```{r pe-1-across}
rescale_column <- function(df, col){
  df <- df |> 
    mutate(across(.cols= {{col}} , .fns = ~rescale_01(.x)))
  return(df)
}
 fish_data <- fish_data |> 
  rescale_column(length:weight)
```

-   `map()` functions lab 8

```{r pe-1-map-1}
xmas2 <- xmas |>
  mutate(Full.Phrase = pmap_chr(.l = list(day=Day, 
                                          num_word=Day.in.Words, 
                                          item = Gift.Item, 
                                          verb=Verb, 
                                          adjective=Adjective, 
                                          location=Location), 
                                .f = make_phrase)
         )
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1 lab 7 part 3

```{r pe2-1}
rescale_01 <- function(x){
  stopifnot(is.numeric(x), length(x)>1)
  r <-  range(x, na.rm=TRUE)
  min <- r[1]
  max <- r[2]
  x <- (x-min)/(max-min)
  return(x)
}
```

-   Example 2 lab 7 3.5

```{r pe2-2}
rescale_column <- function(df, col){
  df <- df |> 
    mutate(across(.cols= {{col}} , .fns = ~rescale_01(.x)))
  return(df)
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across() lab 4 question 5`

```{r pe-3-across}
avocado_cali <- avocado_clean |> filter(region %in% c("LosAngeles", "SanDiego", "Sacramento","SanFrancisco"))  

avo_prices <- avocado_cali |> 
  select(region, 
         type, 
         AveragePrice) |> 
  group_by(region, 
           type) |> 
  summarise( avg = mean(AveragePrice)) |> 
  pivot_wider(names_from = region, 
              values_from = avg) |> 
  summarise(diff = across(.cols= `LosAngeles`:`SanFrancisco`, 
                          .fns=diff)) 
avo_prices$SanFrancisco
```

-   `map()` functions (Provide 2 Examples) practice activity 8

```{r pe-3-map-1}
xmas2 <- xmas |>
  mutate(Full.Phrase = pmap_chr(.l = list(day=Day, 
                                          num_word=Day.in.Words, 
                                          item = Gift.Item, 
                                          verb=Verb, 
                                          adjective=Adjective, 
                                          location=Location), 
                                .f = make_phrase)
         )
```

lab8

```{r pe-3-map-2}
song <- map_chr(.x=1:12, 
        .f = ~sing_day(xmas2, 
                       .x, 
                       Full.Phrase)) |>
  str_c(collapse = ".\n\n") 
  
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1 lab4 question 4 slice_max

```{r pe-4-1}
new_avocado_major <- avocado_major |> 
  separate(col = Date, 
           sep = "-", 
           into = c("Year", "Month", "Day")) 
new_avocado_major |> 
  filter(Year==2017, 
         type== "organic") |> 
  slice_max(`Total Volume`)

```

-   Example 2 lab7 new across

```{r pe-4-2}
rescale_column <- function(df, col){
  df <- df |> 
    mutate(across(.cols= {{col}} , .fns = ~rescale_01(.x)))
  return(df)
}
 fish_data <- fish_data |> 
  rescale_column(length:weight)
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1 practice 9 activity

```{r dsm-1-1}
set.seed(1957)

music_man <- function(n_tromb, n_cor, n_reed){
  
  trombones <- rnorm(n_tromb, mean=4.6, sd=.8)
  cornets <- runif(n_cor,min=1.5,max=3.5)
  reeds <- rchisq(n_reed,df=4)
  
  return(sum(trombones, cornets,reeds))
  
}

my_weights <- map_dbl(.x = 1:1000, 
                      .f = ~ music_man(n_tromb = 76,n_cor= 110, n_reed=542+318+175)
                      ) 
sum(my_weights<4532)
```

-   Example 2 practice 9 activity

```{r dsm-1-2}
sim <- rnorm(100, mean =4.6, sd=.8)
sim <- sim < 4
sum(sim)
```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1 practice activity 9

```{r dsm-2-1}
data <- read_csv("mystery_animal.csv")
data<-data |>
  lm(weight_after ~ weight_before, data=_)

data |>
  broom::augment() |> 
  ggplot(mapping = aes(y = .resid, x = .fitted)) +
  geom_point()
```

-   Example 2 lab 9

```{r dsm-2-2}
a_lm<- allison_f |>
  lm(Total ~ Year, data=_)
tidy(a_lm)
a_lm |>
  broom::augment() |> 
  ggplot(mapping = aes(y = .resid, x = .fitted)) +
  geom_point()
```

3.  Above are the learning targets, I was able to demonstrate thus far into the Winter Quarter. I believe I deserve an A in the class because I showed efficiency in most of the learning targets and developed early understanding with the ones i don't have. I would always incorporate feedback i am given to my assignments as seen in my progression of my labs. I would always implement the revision suggestions given. I have done extensive external research to make my graphs and tables look nicer shown by lab 7 and lab 9. In my work group, I have become more and more understanding of everyones backgrounds and is patient when explaining to my group members concepts they do not understand. With this, my group is ensured to success on upcoming practice activties and never fall behind. I would also answer questions on discord when presented. I have contributed to creating a respectful classroom learning community by willing to help anyone who asks for my assistance. I always complete my peer reviews and use the guidelines.

I believe I deserve an A- in the class currently because of the following reasons below:

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Whenever I recieve an incomplete on an assignment, I would keep revising them until I get them completed because I want to learn from my mistakes and grow from them . My growth can be seen throught incorporated feedbacks throughout my assignments

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

In all of my challenge assignments I ensure that I do them well even if I have to do external research like in challenge 4. I would read multiple documentations of function I am not familiar of an would incorporate them in correctly

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

I act on my role given each week in my group and ensure that they understand what is going on in each step of the assignment and I would also answer question on discord from time to time. The only reason why I deserve an A- not an A is because I did not complete first the peer review because I was not aware that we had to complete it since I could not find where to do them. But after that first mistake, I have been pretty consistent with them.

![](images/image-963459836.png)
